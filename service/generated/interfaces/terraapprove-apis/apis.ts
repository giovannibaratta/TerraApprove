/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/source-code-refs": {
    /** Create a reference to the source code in the system */
    post: operations["createSourceCodeRef"];
  };
  "/plan-refs": {
    /** Create a reference to the Terraform plan in the system */
    post: operations["createPlanRef"];
  };
  "/runs": {
    /** Create a run in the system */
    post: operations["createRun"];
  };
  "/runs/{run_id}": {
    /** Get a run in the system */
    get: operations["getRun"];
  };
  "/runs/status-changed": {
    /** [INTERNAL] Notify the system that the status of a run has changed */
    post: operations["notifyStatusChanged"];
  };
  "/approvals": {
    /** Create an approval in the system */
    post: operations["createApproval"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    readonly PostSourceCode: components["schemas"]["S3Payload"];
    readonly PostRun: {
      /** @description The ID managedy by the system of the source code reference. */
      readonly source_code_id: string;
      /**
       * @description The ID managedy by the system of the plan reference. The plan must be generated
       * starting from the specified source code.
       */
      readonly plan_id: string;
    };
    readonly S3Payload: {
      readonly s3: {
        /** Format: uri */
        readonly url: string;
      };
    };
    readonly PostApproval: {
      /** @description The ID managedy by the system of the run. */
      readonly run_id: string;
      readonly approval: {
        readonly type: string;
        readonly comment?: string;
      };
    };
    readonly GetRun: {
      /**
       * Format: uuid
       * @description The ID managedy by the system of the run.
       */
      readonly id: string;
      readonly state: string;
      /** Format: date-time */
      readonly created_at: string;
      /** Format: date-time */
      readonly updated_at: string;
    };
    readonly BadRequestResponse: {
      readonly errors: readonly {
          /** @description Machine readable error code */
          readonly code: string;
          /** @description A human readable message describing the error */
          readonly message: string;
        }[];
    };
    readonly PostRunStatusChanged: {
      /**
       * Format: uuid
       * @description The ID managedy by the system of the run.
       */
      readonly id: string;
      readonly state: string;
      /** @description The revision of the run. */
      readonly revision: string;
      /** Format: date-time */
      readonly updated_at?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /** Create a reference to the source code in the system */
  createSourceCodeRef: {
    readonly requestBody: {
      readonly content: {
        readonly "application/json": components["schemas"]["PostSourceCode"];
      };
    };
    responses: {
      /**
       * @description Source code reference created successfully. A link to the source code metadata stored in the system is
       * returned in the Location header. The unique ID can be used to be referenced in subsequent requests.
       */
      201: {
        content: never;
      };
      /** @description The request is malformed of contains invalid data */
      400: {
        content: {
          readonly "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
    };
  };
  /** Create a reference to the Terraform plan in the system */
  createPlanRef: {
    readonly requestBody: {
      readonly content: {
        readonly "application/json": components["schemas"]["S3Payload"];
      };
    };
    responses: {
      /**
       * @description Plan reference created successfully. A link to the plan metadata stored in the system is
       * returned in the Location header. The unique ID can be used to be referenced in subsequent requests.
       */
      201: {
        content: never;
      };
      /** @description The request is malformed of contains invalid data */
      400: {
        content: {
          readonly "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
    };
  };
  /** Create a run in the system */
  createRun: {
    readonly requestBody: {
      readonly content: {
        readonly "application/json": components["schemas"]["PostRun"];
      };
    };
    responses: {
      /** @description Run created successfully */
      201: {
        content: never;
      };
    };
  };
  /** Get a run in the system */
  getRun: {
    parameters: {
      path: {
        run_id: string;
      };
    };
    responses: {
      /** @description Run retrieved successfully */
      200: {
        content: {
          readonly "application/json": components["schemas"]["GetRun"];
        };
      };
    };
  };
  /** [INTERNAL] Notify the system that the status of a run has changed */
  notifyStatusChanged: {
    readonly requestBody: {
      readonly content: {
        readonly "application/json": components["schemas"]["PostRunStatusChanged"];
      };
    };
    responses: {
      /** @description Status change notification received successfully */
      200: {
        content: never;
      };
    };
  };
  /** Create an approval in the system */
  createApproval: {
    readonly requestBody: {
      readonly content: {
        readonly "application/json": components["schemas"]["PostApproval"];
      };
    };
    responses: {
      /** @description Approval created successfully */
      201: {
        content: never;
      };
    };
  };
}
