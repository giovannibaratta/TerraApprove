version: "3.8"
services:
  # Local DB used for development and manual testing
  db:
    profiles: [dev]
    image: postgres:16.1
    environment:
      POSTGRES_USER: developer
      POSTGRES_PASSWORD: Safe1!
      POSTGRES_DB: terraapprove
    ports:
      - 5432:5432

  # Local DB used for integration tests
  integration-test-db:
    profiles: [test]
    image: postgres:16.1
    # These tweaks are not safe to use in production, but they can speed up local development
    # Apply some performance improvements to pg as these guarantees are not needed while running locally
    command: "postgres -c 'shared_buffers=128MB' -c 'fsync=off' -c 'synchronous_commit=off' -c 'full_page_writes=off' -c 'max_connections=100' -c 'client_min_messages=warning'"
    environment:
      POSTGRES_USER: developer
      POSTGRES_PASSWORD: Safe1!
      POSTGRES_DB: terraapprove
    ports:
      - 5433:5432

  message-broker:
    profiles: [dev, test]
    container_name: message-broker
    image: bitnami/kafka:latest
    ports:
      - "9090:9090"
      - "9092:9092"
      - "9997:9997"
    environment:
      KAFKA_CFG_NODE_ID: 0
      KAFKA_CFG_PROCESS_ROLES: controller,broker
      # The broker listens on two ports: 9090 for internal communication and 9092 for external communication
      KAFKA_CFG_LISTENERS: CONTROLLER://:9090,BROKER://:9092
      # Advertise the external listener on the container's ip address
      KAFKA_CFG_ADVERTISED_LISTENERS: BROKER://localhost:9092
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,BROKER:PLAINTEXT
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 0@localhost:9090
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: BROKER
      KAFKA_CFG_KAFKA_JMX_PORT: 9997
      KAFKA_JMX_OPTS: -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=message-broker -Dcom.sun.management.jmxremote.rmi.port=9997
      # Allows the creation of topics automatically. This is useful for development and testing
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"

  # The message broker UI is only needed to have insights of what is happening in the message broker
  message-broker-ui:
    profiles: [dev]
    container_name: message-broker-ui
    image: provectuslabs/kafka-ui
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: dev
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: message-broker:9092
      KAFKA_CLUSTERS_0_METRICS_PORT: 9997

  # Apache Flink
  flink-job-manager:
    profiles: [dev]
    container_name: flink-job-manager
    image: flink-event-to-http-converter
    build:
      context: apache-flink
    ports:
      - "8081:8081"
    command:
      - standalone-job
      - --job-classname
      - it.giovannibaratta.EventToHttpConverter
      - --jars
      - /opt/flink/usrlib/EventToHttpConverter.jar
      # Custom properties required by the job
      - --kafkaBootstrapServers
      - "message-broker:9092"
      # If you need to add a new topic, add the topic name separated by a comma from the previous one
      # and add two extra variables using the following schema
      # - --<topic-name>
      # - "<http-endpoint>"
      # Example:
      # - --my-custom-topic
      # - "http://example.local:8080/my-custom-topic"
      - --kafkaTopics
      - "run-status-changed"
      - --run-status-changed
      - "http://backend-proxy:9000/runs/status-changed"
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: flink-job-manager
        parallelism.default: 2

  # Flink Task Manager that will execute the job
  flink-task-manager:
    profiles: [dev]
    container_name: flink-task-manager
    image: flink-event-to-http-converter
    depends_on:
      - flink-job-manager
    command: taskmanager
    scale: 1
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: flink-job-manager
        taskmanager.numberOfTaskSlots: 2
        parallelism.default: 2

  backend-proxy:
    profiles: [dev]
    image: nginx
    container_name: backend-proxy
    volumes:
      - type: bind
        source: ./nginx/nginx.conf
        target: /etc/nginx/conf.d/default.conf
        read_only: true
    ports:
      - 9000:9000
